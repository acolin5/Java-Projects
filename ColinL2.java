// CSUN Fall 22 COMP182 ColinL2// merge sorted elements a[j] thru arr[k] and// b[j] thru b[k] and save them from c[m], ....import java.util.*;import java.io.*;public class ColinL2{			//use prt for System.out to save typing    PrintStream prt = System.out;    // swap a[m] and a[n]	protected void swap(int a[], int m, int n){		int temp = a[m];		a[m] = a[n];		a[n] = temp;	}	// Generate k random integers and store them in arr[].		private void gendata(int arr[], int k){		//declare variables		int i, z = 150; //Give some value to z		//initialize rand		Random rand = new Random();		//Generate k random no.		for (i = 0; i < k ; i ++)			arr[i] = rand.nextInt(z);					// end for	} // end gendata    // Selection sort a[j] thru a[k] 	    public void selectionjk(int arr[], int j, int k){   //complete this method    for (int i = j; i <= k; i++) {        // find the minimum element in the subarray        int minIndex = i;        for (int l = i + 1; l <= k; l++) {            if (arr[l] < arr[minIndex]) {                minIndex = l;            }        }        // swap the minimum element with the current element        int temp = arr[i];        arr[i] = arr[minIndex];        arr[minIndex] = temp;    }}	// print a[] formatted 20 numbers per line    private void prtarr(int a[], int j, int k){		prt.printf("(%2d):", k-j+1);		for (int i = j; i <= k; i++){ 			prt.printf("%2d ", a[i]);			if((i+1) % 20 == 0)prt.printf("\n\t");		} // end for    }	//merge sorted elements arr[p] thru arr[q] and	//sorted elements arr[q+1] thru arr[r].	private void mergejk(int a[], int b[], int c[], int j, int k, int m) {		//Complete this method        int i, l, q;        l = m; // index for c[]        i = j; // index for a[]        q = j; // index for b[]        while (i <= k && q <= k) {            if (a[i] < b[q])                c[l] = a[i++]; // end if            else                c[l] = b[q++]; // end else            l++;        } // end while        while (i <= k)            c[l++] = a[i++];        while (q <= k)            c[l++] = b[q++];    } // end mergejk	// process method for heap sort	private void process(int n, int j, int k, int m){ 		int i;		//Allocate space for arrays		int a[] =  new int[30];		int b[] =  new int[30];		int c[] =  new int[30];		gendata(a, n);		prt.printf("\n\t  Array a[]:");		prtarr(a, 0, n-1); // print a[]				gendata(b, n);		prt.printf("\n\t  Array b[]:");		prtarr(b, 0, n-1); // print b[]		for(i=0; i < n; i++) c[i] = 99;				selectionjk(a, j, k);		prt.printf("\n\ta[0]...a[k]:");		prtarr(a, 0, k); // print a[]		selectionjk(b, j, k);		prt.printf("\n\tb[0]...b[k]:");		prtarr(b, 0, k); // print b[]				mergejk(a, b, c, j, k, m);		prt.printf("\n\tArray c[] after merge sortrd a[j] thru a[k] and sorted b[j] thru b[k]\n\t");		prtarr(c, 0, n-1); // print c[]   } //end process method		//***********************************************************	public static void main(String[] args) throws Exception{		int n, j, k, m, cnt = args.length; // get no. of atguments		if (cnt < 4){		    System.out.printf("\n\tOOOPS Invalid No. of aguments!"+			"\n\tTO Execute: java ColinL2 15 0 4 5");			return;		} // end if						// get input n, j, k, and m		n = Integer.parseInt(args[0]);		j = Integer.parseInt(args[1]);		k = Integer.parseInt(args[2]);		m = Integer.parseInt(args[3]);			//System.out.printf("\n fn=%s, array n=%d", fn, n);		System.out.printf("\n\tLabExam2: n=%d, j=%d, k=%d, m = %d", n, j, k, m);					// create an instance of ColinL2 class		ColinL2 srt = new ColinL2();				// call process method		srt.process(n, j, k, m); 					//MAKE SURE TO WRITE YOUR NAME IN NEXT LINE				System.out.printf("\n\tAuthor: A. Colin Date: " + java.time.LocalDate.now()); 	}	// end main}// class ColinL2