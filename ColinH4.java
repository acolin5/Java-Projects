// CSUN FALL 22   COMP182  Homework-3// Java Infix to Postfix Project Colinpostfix.javaimport java.io.*; import java.util.*; import java.util.Scanner; public class ColinH4{	PrintStream prt = System.out;		// find priority of char ch    private int priority(char ch){   switch(ch) {    case '+':    return 1;    case '-':    return 1;    case '*':    return 2;    case '/':    return 2;    case '^':    return 3;     }  // end priority     return -1;    }      private String evaluatePost(double[] vals, String post){      String value, st = " ", s = " ", str;       char ch = ' ';       double val3; 		Stack<String> stk = new Stack<String>();      		for(int i = 0 ; i < post.length(); i++) {      			ch = post.charAt(i);         s = String.valueOf(ch);          			if( Character.isLetter(ch)){         double t = vals [ ch - 'A'];          String l = Double.toString(t);         stk.push(l);                            } else {				String s1 = stk.pop();            double val1 = Double.valueOf(s1);                            String s2 = stk.pop();                double val2 = Double.valueOf(s2);                				switch(ch){            					case '^' :						val3 = (int)(Math.pow(val1, val2));                  str = Double.toString(val3);                   stk.push(str);                						break;					case '/' :						val3= val2/val1;                  str = Double.toString(val3);                   stk.push(str);						break;					case '*' :						val3 = val1*val2;                  str = Double.toString(val3);                   stk.push(str);						break;					case '+' :						val3 = val1+val2;                  str = Double.toString(val3);                   stk.push(str);						break;					case '-' :						val3 = val2-val1;                  str = Double.toString(val3);                   stk.push(str);						break;				}			}		}		return stk.pop();   }            // Convert infix exp to postfix      private String postfix(String exp){          Stack <Character> stk = new Stack <Character>(); //error: type Stack does not take parameters      int j, n;			char ch;       n = exp.length();       exp = exp.toUpperCase();       String post = "";       for (j=0; j<n; j++){         ch = exp.charAt(j);          if (Character.isLetter(ch))            post += ch;          else if (ch == '(')            stk.push(ch);           else if (ch == ')'){              while (!stk.empty() && stk.peek() != '('){               post += stk.pop();               }              if (stk.empty()|| stk.peek() != '('){                  post = "invalid expression";                  return post; //exit                  }//end if                   else                     stk.pop();                  }                  else                  if (ch == '+' || ch =='-' || ch=='*'|| ch=='/' || ch=='^'){                  while (!stk.empty() && stk.peek()!= '(' && priority(stk.peek()) >= priority(ch)){                        //if (stk.peek() == '('){                        //post = "invalid expression";                        //return post;                         //}                         post += stk.pop();                       }                        stk.push(ch);                      }                      else                       post +=ch;                      }                     while (!stk.empty()){                        if (stk.peek() == '(') {                        post = "invalid expression";                        return post;                         }                        post += stk.pop();                        }                        return post;                      } //end postfix                                                  	// Your process method should be as follow:	// read infix and convert to postfix	private void process(String fn){ 	 //infix and postfix expressions are String	     String exp, post = "", sub = "";     int j, n, x, val, Ops; // no. of infix input	     double[] vals = new double[26];      String value = " ";              try{	    Scanner inf = new Scanner(new File(fn)); 		// read no. of expressions		n = inf.nextInt();					//  prt.printf("\nn: %d", n); 		// Read input from any data file 		for (j = 1; j <= n; j++){		  // read next infix xpression						  exp = inf.next();		  //prt.printf("\nn: %s", exp); 		  // call infix to postfix method		  post = postfix(exp);                Ops = inf.nextInt();         		  prt.printf("\n%s, %d Operands: ", exp, Ops);                for ( x = 1; x <= Ops; x++){                char var = inf.next().charAt(0);        double v = inf.nextDouble();                 vals[var - 'A'] = v;                prt.printf("%c=%.2f, ", var, v);               		}// end for           prt.printf("Post: %s", post);      				if (!post.equals(" invalid expression")) {					value = evaluatePost(vals, post);					double valueD = Double.valueOf(value);					prt.printf(", Value: %.4f", valueD);				} //end if            }		inf.close();// close input file	 }catch (Exception e) {prt.printf("\n\tRead Error! %s", e);}	}// end process method	    public static void main (String[] args){ 		// declare local variables		int cnt = args.length; // get no. of atguments		String fname;				// get no. of  arguments		cnt = args.length;		if (cnt < 1){			System.out.printf("\n\n\tInvalid No. of aguments! EXIT.\n");			return;		} // end if				// create an instance of postfix  		ColinH4 tst = new ColinH4();		// get input file name		fname = args[0];				System.out.printf("\n\n\n  fname: %s", fname);				// Call process to convert infix exp to postfix		tst.process(fname);  //MAKE SURE TO WRITE YOUR NAME IN NEXT LINE				//System.out.printf("\n\tAuthor: A. Colin Date: " + java.time.LocalDate.now());      	System.out.printf("\n\n\tAuthor: A. Colin Date: %s\n",		java.time.LocalDate.now());  	    } // end main  // end Colinpostfix}//created a method called evaluate       