// CSUN FALL 22   COMP 182
// Colinlstlnk.java is linked list implementation of lstinterface. 

import java.util.*;
import java.io.*;

  //lstinterface is an interface  
public class ColinH2 {
	// Colinlstlnk class  variables
	//head is a pointer to beginning of linked list
	private node head = null; 
	// count is no. of elements in the list
	private int count = 0; 
	
	//use prt for System.out to save typing
  	PrintStream prt = System.out;

	// class node
	private class node{
	// class node variables
	  String data; //changed from int data to String data
	  node rlink;
	  // class node constructor
	  node(String x){ //changed from int x to String x
	  data = x; 
	  rlink = null;
	  } // end class node constructor
	}// class node
	
  	// insert x at position p, 
  	// for successful insertion:  1 <= p <= count+1
    private void insertSorted(String x){ //REPLACED from int x to String x STEP 2 b and 2e, REMOVED , int p HAVE to remove all p and create a new insertSorted method
    		// Local variables
		node tmp, cur, prev; 
      node new_node = new node(x);
      prev = null;

      if (head == null) { //Linked list is empty create a new linked list
      new_node = head;
    }
    
    else{
    cur = head;
   
      while (cur.rlink !=null && cur.data.compareTo(new_node.data)< 0){
      cur = cur.rlink; 
      prev = cur; 
      }
      prev.rlink = new_node;
      new_node.rlink = cur; 
	} // end insertlst
}
  	// delete x at position p,  for successful deletion:
  	// list should not be empty and 1 <= p <= count
   
	private int deleteSorted(String x){ // 2e asking to replace public int deletelst(int p){ w/ private int deletesorted string
		// Local variables
      node tmp, cur, prev; 
      tmp = head; 
      node new_node = new node(x);
      prev = null; //change prev to equal after list 
       
      if(tmp != null && tmp.data == new_node.data){ //havent assigned tmp, has no value. 
      tmp = head.rlink;  
      }
      
      while (head.rlink != null){ // && tmp.data != new_node.data){
      prev = tmp;
      tmp = tmp.rlink; 
      }
       //       if (tmp == null){ //return if succeeds
       //       }
        return 0; 

      }
        return 0; 

      }
 
	/*	node tmp, cur;
		prt.printf("\n\t\tDelete element at position %2d:", p);
		if (head == null || p < 1 || p > count){
			prt.printf(" Failed deletion.");
			return 0; // invalid deletion
		} // end if
	
		tmp = head;
		// p == 1 deletes front of list.
		// This is a special case where head changes	  
		if (p == 1){//Delete Front of List
			head = head.rlink;
			tmp.rlink = null;
		}
		else {//Find address of node before p
			cur = head;
			
			// for p=1 or p=2, loop will not execute
			for (int i = 2; i < p; i ++, cur = cur.rlink);
			// end for
		
			// Delete node after cur node
			tmp = cur.rlink;
			cur.rlink = tmp.rlink;
			tmp.rlink = null;  // delete tmp; */
      
	 // end deletelst



  	// sequential serach for x in the list
  	// if successful return position of x in the
  	// list otherwise return 0;
  	private int searchSorted(String x){ //REPLACED with String x 2d, 2e asking to replace from public int searchlst to public int searchlst
		// Local variables
		node cur = head;
    	prt.printf("\n\t\tSearch for %4d:", x);
      if (x.equals(cur.data)){
           prt.printf("found at position %3d", count); 
           return count;     
       }else
         prt.printf("not found"); // Complete the rest of the method
		return 0; // x is not found.
  	} // end searchlst
	  	
  	// print list elements formatted 
	private void prtlst() {
		// Local variables
		node cur;
		prt.printf("\n\tList contents(%d): ", count);
		for (cur = head; cur != null ; cur = cur.rlink)
			prt.printf("%4d, ", cur.data);
		// end for
   	} // end prtlst
		
	// insert, delete and search in the list
	private void process(String fn){
		// Local variables
		int j, nIns, nSrch, nDel, k, p;
      String x;
       //Removed x from int list above and declared a string
		prt.print("\tLinked List implementation of list gets input file "+
		"name from program argument, then reads:"+
		"\n\tnIns: No. of elements to insert followed by elements to "+
		" insert and their positions,"+
		"\n\tnSrch: No. of elements to search, followed by element to "+
		" search"+
		"\n\t nDel: No. of elements to delete followed by position of "+
		" elements to delete" + 	  
		"\n\t\tTo compile: javac Colinlstlnk.java" +
		"\n\t\tTo execute: java  Colinlstlnk inputfilename"); 	  
 	  
		try{  
			// open input file
			Scanner inf = new Scanner(new File(fn)); 
			
			//read no. of elements to insert
			nIns = inf.nextInt(); //REVIEWING LINES 186 FROM HW 1 SOLUTIONS TO FIX ERRORS 
			prt.printf("\n\tInsert %2d elements in the list.", nIns);
			for(j = 1; j <= nIns; j++){
			  x = inf.nextLine();   // read x CHANGED FROM .NEXTINT TO .NEXTLINE()
			 // p = inf.nextInt();  // read position 
			  insertSorted(x); //insert x at position p ORIGINAL k = insertSorted(X)
			} // end for
			prtlst();//print list elements
		
			//read no. of elements to search in list
			nSrch = inf.nextInt(); 
			prt.printf("\n\tSearch for %d elements in list.", nSrch);
			for(j = 1; j <= nSrch; j++){
			  x = inf.nextLine(); // read x to serach
			  k = searchSorted(x);   //delete position p
			}// end for	

			//read no. of positions to delete from list
			nDel = inf.nextInt(); 
			prt.printf("\n\tDelete %d elements from list.", nDel);
			for(j = 1; j <= nDel; j++){
			  p = inf.nextInt();   // read position
			  k = deleteSorted(x);   //delete position p
			}// end for
			prtlst();//print linked list elements

			// close input file 		
			inf.close();   
		}catch (Exception e){prt.printf("\n\tRead Error! %s", e);}
	// Total input:  1+nIns*2 +1+nSrch +1+nDel= nIns*2 + nSrch + nDel + 3
	
		
	} // end process
  
  	// main method
  	public static void main(String args[]) throws Exception{
		// declare variables
		int cnt = args.length; // get no. of atguments
		String fname;
		if (cnt < 1){
		  System.out.printf("\n\n\tInvalid No. of aguments! EXIT.\n");
		  return;
		}
			
		// get input file name
		fname = args[0]; 

		//create an instance of a class
		ColinH2 lst = new ColinH2();		

		lst.process(fname);
		
		System.out.printf("\n\tAuthor: A. Colin Date: %s\n",
		java.time.LocalDate.now()); 
 	} // end main
}// end class Colinlstlnk	
