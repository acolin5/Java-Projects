import java.io.*;import java.util.*;public class ColinH7 {//use prt for System.out to save typing	PrintStream prt = System.out;	           //From Homework 6   	public static void main(String[] args) throws Exception{		int m, n, cnt;		cnt = args.length;		if (cnt < 2){ //changed from 3 to 2		    System.out.printf("\n\tOOOPS Invalid No. of aguments!"+			"\n\tTO Execute: java ColinH7 10 20");			return;		} // end if				//get input m, n		m = Integer.parseInt(args[0]);		n = Integer.parseInt(args[1]);				System.out.printf("\n\tColinH7: m = %d, n = %d", m, n);				// create an instance of ColinH7 class		ColinH7 srt = new ColinH7();				// call process method 		srt.process(m, n);		System.out.printf("\n\n\tAuthor: A. Colin Date: " +			java.time.LocalDate.now()); 			}// end main    //Took from LAB	private void gensorted(int arr[], int k){ 		int j, x=30, y=30; 		Random rand = new Random(); 		arr[0] = rand.nextInt(x); // initialize arr[0]       		//Generate k-1 sorted random no. 		for (j = 1; j < k ; j++) 		arr[j] = arr[j-1]+rand.nextInt(y);       	} // end gensorted 	private void merge(int a[], int m, int b[], int n, int c[]) {		int q = 0;		int w = 0;		int e = 0;      		while(true) {			if ( q == m) { 				while(w != n) {					c[e] = b[w];					w++;					e++;				}				break;			}			else if (w == n) {					while(q != m){					c[e] = a[q];					q++;					e++;				}				break;			}			else {  		 				if(a[q] < b[w]) {					c[e] = a[q];					q++;				}				else {					c[e] = b[w];					w++;				}				e++;			}		}		}    public void prtarr(int a[], int n){		for (int i = 0; i < n; i++) {			prt.printf("%d ", a[i]);		}		prt.printf("\n");    }	// process method for Merge 2 Sorted arrays	private void process(int m, int n) {				prt.print("\n\t\tTo compile: javac ColinH7.java" +		"\n\t\tTo execute: java ColinH7 m n");				// Call gensort		int a[], b[], c[];		a = new int [m];		b = new int [n];		c = new int [m + n];		gensorted(a,m);		gensorted(b,n);		// 		System.out.printf("\n\tn =  " + n);// 		prt.printf("\tb[]: ");// 		prtarr(b,n);	      		// call prtarr		prt.printf("\n\t Input are as follows:\t\n");		System.out.printf("\n\tm = " + m);		      prt.printf("\ta[]: ");		prtarr(a,m);      System.out.printf("\n\tn = " + n);		prt.printf("\tb[]: ");		prtarr(b,n);					// call merge		prt.printf("\n\tAfter merging:\t\n");		System.out.printf("\tsize of c[] = " + (m + n) + "\tc[]: ");		//prt.printf("\tc[]: ");		merge(a, m, b, n, c);		prtarr(c, m + n);		//System.out.printf("\tsize of c[] = " + (m + n) + "\tc[]: ");	}//end process method   	      }